/*
* generated by Xtext
*/
package de.jpwinkler.daf.workflowdsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class WorkflowDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class WorkflowModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowModel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsWorkflowElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//WorkflowModel:
		//	elements+=WorkflowElement*;
		public ParserRule getRule() { return rule; }

		//elements+=WorkflowElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//WorkflowElement
		public RuleCall getElementsWorkflowElementParserRuleCall_0() { return cElementsWorkflowElementParserRuleCall_0; }
	}

	public class WorkflowElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTargetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStepParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cModuleSetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//WorkflowElement:
		//	Target | Step | ModuleSet | Variable;
		public ParserRule getRule() { return rule; }

		//Target | Step | ModuleSet | Variable
		public Alternatives getAlternatives() { return cAlternatives; }

		//Target
		public RuleCall getTargetParserRuleCall_0() { return cTargetParserRuleCall_0; }

		//Step
		public RuleCall getStepParserRuleCall_1() { return cStepParserRuleCall_1; }

		//ModuleSet
		public RuleCall getModuleSetParserRuleCall_2() { return cModuleSetParserRuleCall_2; }

		//Variable
		public RuleCall getVariableParserRuleCall_3() { return cVariableParserRuleCall_3; }
	}

	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStepAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStepStepCrossReference_1_0 = (CrossReference)cStepAssignment_1.eContents().get(0);
		private final RuleCall cStepStepIDTerminalRuleCall_1_0_1 = (RuleCall)cStepStepCrossReference_1_0.eContents().get(1);
		
		//Target:
		//	"target" step=[Step];
		public ParserRule getRule() { return rule; }

		//"target" step=[Step]
		public Group getGroup() { return cGroup; }

		//"target"
		public Keyword getTargetKeyword_0() { return cTargetKeyword_0; }

		//step=[Step]
		public Assignment getStepAssignment_1() { return cStepAssignment_1; }

		//[Step]
		public CrossReference getStepStepCrossReference_1_0() { return cStepStepCrossReference_1_0; }

		//ID
		public RuleCall getStepStepIDTerminalRuleCall_1_0_1() { return cStepStepIDTerminalRuleCall_1_0_1; }
	}

	public class ModuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModulesetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModuleSetEntriesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModuleSetEntriesModuleSetEntryParserRuleCall_3_0 = (RuleCall)cModuleSetEntriesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ModuleSet:
		//	"moduleset" name=ID "{" moduleSetEntries+=ModuleSetEntry* "}";
		public ParserRule getRule() { return rule; }

		//"moduleset" name=ID "{" moduleSetEntries+=ModuleSetEntry* "}"
		public Group getGroup() { return cGroup; }

		//"moduleset"
		public Keyword getModulesetKeyword_0() { return cModulesetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//moduleSetEntries+=ModuleSetEntry*
		public Assignment getModuleSetEntriesAssignment_3() { return cModuleSetEntriesAssignment_3; }

		//ModuleSetEntry
		public RuleCall getModuleSetEntriesModuleSetEntryParserRuleCall_3_0() { return cModuleSetEntriesModuleSetEntryParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MODULE_SET_ENTRY_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MODULE_SET_ENTRY_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCsvKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDoorsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDoorsurlKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCsvfolderKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//MODULE_SET_ENTRY_TYPE:
		//	"csv" | "doors" | "doorsurl" | "csvfolder";
		public ParserRule getRule() { return rule; }

		//"csv" | "doors" | "doorsurl" | "csvfolder"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"csv"
		public Keyword getCsvKeyword_0() { return cCsvKeyword_0; }

		//"doors"
		public Keyword getDoorsKeyword_1() { return cDoorsKeyword_1; }

		//"doorsurl"
		public Keyword getDoorsurlKeyword_2() { return cDoorsurlKeyword_2; }

		//"csvfolder"
		public Keyword getCsvfolderKeyword_3() { return cCsvfolderKeyword_3; }
	}

	public class ModuleSetEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleSetEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeMODULE_SET_ENTRY_TYPEParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceSTRINGTerminalRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		
		//ModuleSetEntry:
		//	type=MODULE_SET_ENTRY_TYPE reference=STRING;
		public ParserRule getRule() { return rule; }

		//type=MODULE_SET_ENTRY_TYPE reference=STRING
		public Group getGroup() { return cGroup; }

		//type=MODULE_SET_ENTRY_TYPE
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//MODULE_SET_ENTRY_TYPE
		public RuleCall getTypeMODULE_SET_ENTRY_TYPEParserRuleCall_0_0() { return cTypeMODULE_SET_ENTRY_TYPEParserRuleCall_0_0; }

		//reference=STRING
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//STRING
		public RuleCall getReferenceSTRINGTerminalRuleCall_1_0() { return cReferenceSTRINGTerminalRuleCall_1_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable:
		//	SimpleVariable | ArrayVariable;
		public ParserRule getRule() { return rule; }

		//SimpleVariable | ArrayVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleVariable
		public RuleCall getSimpleVariableParserRuleCall_0() { return cSimpleVariableParserRuleCall_0; }

		//ArrayVariable
		public RuleCall getArrayVariableParserRuleCall_1() { return cArrayVariableParserRuleCall_1; }
	}

	public class SimpleVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//SimpleVariable:
		//	"var" name=ID "=" value=STRING;
		public ParserRule getRule() { return rule; }

		//"var" name=ID "=" value=STRING
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}

	public class ArrayVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cItemsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cItemsSTRINGTerminalRuleCall_5_0_0 = (RuleCall)cItemsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cItemsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cItemsSTRINGTerminalRuleCall_5_1_1_0 = (RuleCall)cItemsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ArrayVariable:
		//	"var" name=ID "[]" "=" "{" (items+=STRING ("," items+=STRING)*)? "}";
		public ParserRule getRule() { return rule; }

		//"var" name=ID "[]" "=" "{" (items+=STRING ("," items+=STRING)*)? "}"
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_2() { return cLeftSquareBracketRightSquareBracketKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(items+=STRING ("," items+=STRING)*)?
		public Group getGroup_5() { return cGroup_5; }

		//items+=STRING
		public Assignment getItemsAssignment_5_0() { return cItemsAssignment_5_0; }

		//STRING
		public RuleCall getItemsSTRINGTerminalRuleCall_5_0_0() { return cItemsSTRINGTerminalRuleCall_5_0_0; }

		//("," items+=STRING)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//items+=STRING
		public Assignment getItemsAssignment_5_1_1() { return cItemsAssignment_5_1_1; }

		//STRING
		public RuleCall getItemsSTRINGTerminalRuleCall_5_1_1_0() { return cItemsSTRINGTerminalRuleCall_5_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModelConstructorStepParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModelOperationStepParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Step:
		//	ModelConstructorStep | ModelOperationStep;
		public ParserRule getRule() { return rule; }

		//ModelConstructorStep | ModelOperationStep
		public Alternatives getAlternatives() { return cAlternatives; }

		//ModelConstructorStep
		public RuleCall getModelConstructorStepParserRuleCall_0() { return cModelConstructorStepParserRuleCall_0; }

		//ModelOperationStep
		public RuleCall getModelOperationStepParserRuleCall_1() { return cModelOperationStepParserRuleCall_1; }
	}

	public class ModelConstructorStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelConstructorStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstructorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesOperationFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ModelConstructorStep:
		//	"constructor" name=ID "{" features+=OperationFeature* "}";
		public ParserRule getRule() { return rule; }

		//"constructor" name=ID "{" features+=OperationFeature* "}"
		public Group getGroup() { return cGroup; }

		//"constructor"
		public Keyword getConstructorKeyword_0() { return cConstructorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//features+=OperationFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//OperationFeature
		public RuleCall getFeaturesOperationFeatureParserRuleCall_3_0() { return cFeaturesOperationFeatureParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ModelOperationStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelOperationStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesOperationFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ModelOperationStep:
		//	"op" name=ID "{" features+=OperationFeature* "}";
		public ParserRule getRule() { return rule; }

		//"op" name=ID "{" features+=OperationFeature* "}"
		public Group getGroup() { return cGroup; }

		//"op"
		public Keyword getOpKeyword_0() { return cOpKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//features+=OperationFeature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//OperationFeature
		public RuleCall getFeaturesOperationFeatureParserRuleCall_3_0() { return cFeaturesOperationFeatureParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class OperationFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDependencyFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImplementationFeatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForFeatureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSourceFeatureParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//OperationFeature:
		//	DependencyFeature | ImplementationFeature | ForFeature | SourceFeature;
		public ParserRule getRule() { return rule; }

		//DependencyFeature | ImplementationFeature | ForFeature | SourceFeature
		public Alternatives getAlternatives() { return cAlternatives; }

		//DependencyFeature
		public RuleCall getDependencyFeatureParserRuleCall_0() { return cDependencyFeatureParserRuleCall_0; }

		//ImplementationFeature
		public RuleCall getImplementationFeatureParserRuleCall_1() { return cImplementationFeatureParserRuleCall_1; }

		//ForFeature
		public RuleCall getForFeatureParserRuleCall_2() { return cForFeatureParserRuleCall_2; }

		//SourceFeature
		public RuleCall getSourceFeatureParserRuleCall_3() { return cSourceFeatureParserRuleCall_3; }
	}

	public class SourceFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SourceFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleSetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModuleSetModuleSetCrossReference_1_0 = (CrossReference)cModuleSetAssignment_1.eContents().get(0);
		private final RuleCall cModuleSetModuleSetIDTerminalRuleCall_1_0_1 = (RuleCall)cModuleSetModuleSetCrossReference_1_0.eContents().get(1);
		
		//SourceFeature:
		//	"source" moduleSet=[ModuleSet];
		public ParserRule getRule() { return rule; }

		//"source" moduleSet=[ModuleSet]
		public Group getGroup() { return cGroup; }

		//"source"
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }

		//moduleSet=[ModuleSet]
		public Assignment getModuleSetAssignment_1() { return cModuleSetAssignment_1; }

		//[ModuleSet]
		public CrossReference getModuleSetModuleSetCrossReference_1_0() { return cModuleSetModuleSetCrossReference_1_0; }

		//ID
		public RuleCall getModuleSetModuleSetIDTerminalRuleCall_1_0_1() { return cModuleSetModuleSetIDTerminalRuleCall_1_0_1; }
	}

	public class ForFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLoopVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLoopVarIDTerminalRuleCall_1_0 = (RuleCall)cLoopVarAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArrayVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArrayVarIDTerminalRuleCall_3_0 = (RuleCall)cArrayVarAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeaturesOperationFeatureParserRuleCall_5_0 = (RuleCall)cFeaturesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ForFeature:
		//	"for" loopVar=ID "in" arrayVar=ID "{" features+=OperationFeature* "}";
		public ParserRule getRule() { return rule; }

		//"for" loopVar=ID "in" arrayVar=ID "{" features+=OperationFeature* "}"
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//loopVar=ID
		public Assignment getLoopVarAssignment_1() { return cLoopVarAssignment_1; }

		//ID
		public RuleCall getLoopVarIDTerminalRuleCall_1_0() { return cLoopVarIDTerminalRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//arrayVar=ID
		public Assignment getArrayVarAssignment_3() { return cArrayVarAssignment_3; }

		//ID
		public RuleCall getArrayVarIDTerminalRuleCall_3_0() { return cArrayVarIDTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//features+=OperationFeature*
		public Assignment getFeaturesAssignment_5() { return cFeaturesAssignment_5; }

		//OperationFeature
		public RuleCall getFeaturesOperationFeatureParserRuleCall_5_0() { return cFeaturesOperationFeatureParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class DependencyFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DependencyFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStepAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStepStepCrossReference_1_0 = (CrossReference)cStepAssignment_1.eContents().get(0);
		private final RuleCall cStepStepIDTerminalRuleCall_1_0_1 = (RuleCall)cStepStepCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//DependencyFeature:
		//	"dependency" step=[Step] ("{" variables+=Variable* "}")? name=ID?;
		public ParserRule getRule() { return rule; }

		//"dependency" step=[Step] ("{" variables+=Variable* "}")? name=ID?
		public Group getGroup() { return cGroup; }

		//"dependency"
		public Keyword getDependencyKeyword_0() { return cDependencyKeyword_0; }

		//step=[Step]
		public Assignment getStepAssignment_1() { return cStepAssignment_1; }

		//[Step]
		public CrossReference getStepStepCrossReference_1_0() { return cStepStepCrossReference_1_0; }

		//ID
		public RuleCall getStepStepIDTerminalRuleCall_1_0_1() { return cStepStepIDTerminalRuleCall_1_0_1; }

		//("{" variables+=Variable* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_1_0() { return cVariablesVariableParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }

		//name=ID?
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}

	public class ImplementationFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplementationFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImplementationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImplementationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImplementationSTRINGTerminalRuleCall_1_0 = (RuleCall)cImplementationAssignment_1.eContents().get(0);
		
		//ImplementationFeature:
		//	"implementation" implementation=STRING;
		public ParserRule getRule() { return rule; }

		//"implementation" implementation=STRING
		public Group getGroup() { return cGroup; }

		//"implementation"
		public Keyword getImplementationKeyword_0() { return cImplementationKeyword_0; }

		//implementation=STRING
		public Assignment getImplementationAssignment_1() { return cImplementationAssignment_1; }

		//STRING
		public RuleCall getImplementationSTRINGTerminalRuleCall_1_0() { return cImplementationSTRINGTerminalRuleCall_1_0; }
	}
	
	
	private final WorkflowModelElements pWorkflowModel;
	private final WorkflowElementElements pWorkflowElement;
	private final TargetElements pTarget;
	private final ModuleSetElements pModuleSet;
	private final MODULE_SET_ENTRY_TYPEElements pMODULE_SET_ENTRY_TYPE;
	private final ModuleSetEntryElements pModuleSetEntry;
	private final VariableElements pVariable;
	private final SimpleVariableElements pSimpleVariable;
	private final ArrayVariableElements pArrayVariable;
	private final StepElements pStep;
	private final ModelConstructorStepElements pModelConstructorStep;
	private final ModelOperationStepElements pModelOperationStep;
	private final OperationFeatureElements pOperationFeature;
	private final SourceFeatureElements pSourceFeature;
	private final ForFeatureElements pForFeature;
	private final DependencyFeatureElements pDependencyFeature;
	private final ImplementationFeatureElements pImplementationFeature;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WorkflowDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWorkflowModel = new WorkflowModelElements();
		this.pWorkflowElement = new WorkflowElementElements();
		this.pTarget = new TargetElements();
		this.pModuleSet = new ModuleSetElements();
		this.pMODULE_SET_ENTRY_TYPE = new MODULE_SET_ENTRY_TYPEElements();
		this.pModuleSetEntry = new ModuleSetEntryElements();
		this.pVariable = new VariableElements();
		this.pSimpleVariable = new SimpleVariableElements();
		this.pArrayVariable = new ArrayVariableElements();
		this.pStep = new StepElements();
		this.pModelConstructorStep = new ModelConstructorStepElements();
		this.pModelOperationStep = new ModelOperationStepElements();
		this.pOperationFeature = new OperationFeatureElements();
		this.pSourceFeature = new SourceFeatureElements();
		this.pForFeature = new ForFeatureElements();
		this.pDependencyFeature = new DependencyFeatureElements();
		this.pImplementationFeature = new ImplementationFeatureElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.jpwinkler.daf.workflowdsl.WorkflowDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//WorkflowModel:
	//	elements+=WorkflowElement*;
	public WorkflowModelElements getWorkflowModelAccess() {
		return pWorkflowModel;
	}
	
	public ParserRule getWorkflowModelRule() {
		return getWorkflowModelAccess().getRule();
	}

	//WorkflowElement:
	//	Target | Step | ModuleSet | Variable;
	public WorkflowElementElements getWorkflowElementAccess() {
		return pWorkflowElement;
	}
	
	public ParserRule getWorkflowElementRule() {
		return getWorkflowElementAccess().getRule();
	}

	//Target:
	//	"target" step=[Step];
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}

	//ModuleSet:
	//	"moduleset" name=ID "{" moduleSetEntries+=ModuleSetEntry* "}";
	public ModuleSetElements getModuleSetAccess() {
		return pModuleSet;
	}
	
	public ParserRule getModuleSetRule() {
		return getModuleSetAccess().getRule();
	}

	//MODULE_SET_ENTRY_TYPE:
	//	"csv" | "doors" | "doorsurl" | "csvfolder";
	public MODULE_SET_ENTRY_TYPEElements getMODULE_SET_ENTRY_TYPEAccess() {
		return pMODULE_SET_ENTRY_TYPE;
	}
	
	public ParserRule getMODULE_SET_ENTRY_TYPERule() {
		return getMODULE_SET_ENTRY_TYPEAccess().getRule();
	}

	//ModuleSetEntry:
	//	type=MODULE_SET_ENTRY_TYPE reference=STRING;
	public ModuleSetEntryElements getModuleSetEntryAccess() {
		return pModuleSetEntry;
	}
	
	public ParserRule getModuleSetEntryRule() {
		return getModuleSetEntryAccess().getRule();
	}

	//Variable:
	//	SimpleVariable | ArrayVariable;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//SimpleVariable:
	//	"var" name=ID "=" value=STRING;
	public SimpleVariableElements getSimpleVariableAccess() {
		return pSimpleVariable;
	}
	
	public ParserRule getSimpleVariableRule() {
		return getSimpleVariableAccess().getRule();
	}

	//ArrayVariable:
	//	"var" name=ID "[]" "=" "{" (items+=STRING ("," items+=STRING)*)? "}";
	public ArrayVariableElements getArrayVariableAccess() {
		return pArrayVariable;
	}
	
	public ParserRule getArrayVariableRule() {
		return getArrayVariableAccess().getRule();
	}

	//Step:
	//	ModelConstructorStep | ModelOperationStep;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}

	//ModelConstructorStep:
	//	"constructor" name=ID "{" features+=OperationFeature* "}";
	public ModelConstructorStepElements getModelConstructorStepAccess() {
		return pModelConstructorStep;
	}
	
	public ParserRule getModelConstructorStepRule() {
		return getModelConstructorStepAccess().getRule();
	}

	//ModelOperationStep:
	//	"op" name=ID "{" features+=OperationFeature* "}";
	public ModelOperationStepElements getModelOperationStepAccess() {
		return pModelOperationStep;
	}
	
	public ParserRule getModelOperationStepRule() {
		return getModelOperationStepAccess().getRule();
	}

	//OperationFeature:
	//	DependencyFeature | ImplementationFeature | ForFeature | SourceFeature;
	public OperationFeatureElements getOperationFeatureAccess() {
		return pOperationFeature;
	}
	
	public ParserRule getOperationFeatureRule() {
		return getOperationFeatureAccess().getRule();
	}

	//SourceFeature:
	//	"source" moduleSet=[ModuleSet];
	public SourceFeatureElements getSourceFeatureAccess() {
		return pSourceFeature;
	}
	
	public ParserRule getSourceFeatureRule() {
		return getSourceFeatureAccess().getRule();
	}

	//ForFeature:
	//	"for" loopVar=ID "in" arrayVar=ID "{" features+=OperationFeature* "}";
	public ForFeatureElements getForFeatureAccess() {
		return pForFeature;
	}
	
	public ParserRule getForFeatureRule() {
		return getForFeatureAccess().getRule();
	}

	//DependencyFeature:
	//	"dependency" step=[Step] ("{" variables+=Variable* "}")? name=ID?;
	public DependencyFeatureElements getDependencyFeatureAccess() {
		return pDependencyFeature;
	}
	
	public ParserRule getDependencyFeatureRule() {
		return getDependencyFeatureAccess().getRule();
	}

	//ImplementationFeature:
	//	"implementation" implementation=STRING;
	public ImplementationFeatureElements getImplementationFeatureAccess() {
		return pImplementationFeature;
	}
	
	public ParserRule getImplementationFeatureRule() {
		return getImplementationFeatureAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
